/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#ifndef MESSAGE_QPB_H
#define MESSAGE_QPB_H

#include "protobuf_messages_exports.qpb.h"

#include <QtProtobuf/qprotobuflazymessagepointer.h>
#include <QtProtobuf/qprotobufmessage.h>
#include <QtProtobuf/qprotobufobject.h>
#include <QtProtobuf/qprotobufoneof.h>
#include <QtProtobuf/qtprotobuftypes.h>

#include <QtCore/qbytearray.h>
#include <QtCore/qlist.h>
#include <QtCore/qmetatype.h>
#include <QtCore/qshareddata.h>
#include <QtCore/qstring.h>

namespace chat {
class Login;
namespace Login_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace Login_QtProtobufNested

class Sensor;
namespace Sensor_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace Sensor_QtProtobufNested

class Chat;
namespace Chat_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace Chat_QtProtobufNested

class Wrapper;
namespace Wrapper_QtProtobufNested {
enum class QtProtobufFieldEnum;
enum class PayloadFields;
} // namespace Wrapper_QtProtobufNested

#ifdef QT_USE_PROTOBUF_LIST_ALIASES
using LoginRepeated = QList<Login>;
using SensorRepeated = QList<Sensor>;
using ChatRepeated = QList<Chat>;
using WrapperRepeated = QList<Wrapper>;
#endif // QT_USE_PROTOBUF_LIST_ALIASES

class Login_QtProtobufData;
class Login : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_PROTOBUF_MESSAGES_EXPORT)
    Q_PROPERTY(QString name READ name WRITE setName SCRIPTABLE true)
    Q_PROPERTY(QtProtobuf::int64 time READ time WRITE setTime SCRIPTABLE false)
    Q_PROPERTY(QtProtobuf::int64 typeID READ typeID WRITE setTypeID SCRIPTABLE false)

public:
    using QtProtobufFieldEnum = Login_QtProtobufNested::QtProtobufFieldEnum;
    QPB_PROTOBUF_MESSAGES_EXPORT Login();
    QPB_PROTOBUF_MESSAGES_EXPORT ~Login();
    QPB_PROTOBUF_MESSAGES_EXPORT Login(const Login &other);
    QPB_PROTOBUF_MESSAGES_EXPORT Login &operator =(const Login &other);
    QPB_PROTOBUF_MESSAGES_EXPORT Login(Login &&other) noexcept;
    Login &operator =(Login &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(Login &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }
    QPB_PROTOBUF_MESSAGES_EXPORT Q_IMPLICIT operator QVariant() const;

    QPB_PROTOBUF_MESSAGES_EXPORT const QString &name() const &;

    QPB_PROTOBUF_MESSAGES_EXPORT QtProtobuf::int64 time() const;

    QPB_PROTOBUF_MESSAGES_EXPORT QtProtobuf::int64 typeID() const;
    QPB_PROTOBUF_MESSAGES_EXPORT void setName(const QString &name);
    QPB_PROTOBUF_MESSAGES_EXPORT void setName(QString &&name);
    QPB_PROTOBUF_MESSAGES_EXPORT void setTime(QtProtobuf::int64 time);
    QPB_PROTOBUF_MESSAGES_EXPORT void setTypeID(QtProtobuf::int64 typeID);
    QPB_PROTOBUF_MESSAGES_EXPORT static void registerTypes();

private:
    friend QPB_PROTOBUF_MESSAGES_EXPORT bool comparesEqual(const Login &lhs, const Login &rhs) noexcept;
    friend bool operator==(const Login &lhs, const Login &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const Login &lhs, const Login &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<Login_QtProtobufData> dptr;
};
namespace Login_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_PROTOBUF_MESSAGES_EXPORT)

enum class QtProtobufFieldEnum {
    NameProtoFieldNumber = 1,
    TimeProtoFieldNumber = 2,
    TypeIDProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace Login_QtProtobufNested

class Sensor_QtProtobufData;
class Sensor : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_PROTOBUF_MESSAGES_EXPORT)
    Q_PROPERTY(QString iD READ iD WRITE setID SCRIPTABLE true)
    Q_PROPERTY(QtProtobuf::int64 value READ value WRITE setValue SCRIPTABLE false)
    Q_PROPERTY(QtProtobuf::int64 typeID READ typeID WRITE setTypeID SCRIPTABLE false)

public:
    using QtProtobufFieldEnum = Sensor_QtProtobufNested::QtProtobufFieldEnum;
    QPB_PROTOBUF_MESSAGES_EXPORT Sensor();
    QPB_PROTOBUF_MESSAGES_EXPORT ~Sensor();
    QPB_PROTOBUF_MESSAGES_EXPORT Sensor(const Sensor &other);
    QPB_PROTOBUF_MESSAGES_EXPORT Sensor &operator =(const Sensor &other);
    QPB_PROTOBUF_MESSAGES_EXPORT Sensor(Sensor &&other) noexcept;
    Sensor &operator =(Sensor &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(Sensor &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }
    QPB_PROTOBUF_MESSAGES_EXPORT Q_IMPLICIT operator QVariant() const;

    QPB_PROTOBUF_MESSAGES_EXPORT const QString &iD() const &;

    QPB_PROTOBUF_MESSAGES_EXPORT QtProtobuf::int64 value() const;

    QPB_PROTOBUF_MESSAGES_EXPORT QtProtobuf::int64 typeID() const;
    QPB_PROTOBUF_MESSAGES_EXPORT void setID(const QString &iD);
    QPB_PROTOBUF_MESSAGES_EXPORT void setID(QString &&iD);
    QPB_PROTOBUF_MESSAGES_EXPORT void setValue(QtProtobuf::int64 value);
    QPB_PROTOBUF_MESSAGES_EXPORT void setTypeID(QtProtobuf::int64 typeID);
    QPB_PROTOBUF_MESSAGES_EXPORT static void registerTypes();

private:
    friend QPB_PROTOBUF_MESSAGES_EXPORT bool comparesEqual(const Sensor &lhs, const Sensor &rhs) noexcept;
    friend bool operator==(const Sensor &lhs, const Sensor &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const Sensor &lhs, const Sensor &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<Sensor_QtProtobufData> dptr;
};
namespace Sensor_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_PROTOBUF_MESSAGES_EXPORT)

enum class QtProtobufFieldEnum {
    IDProtoFieldNumber = 1,
    ValueProtoFieldNumber = 2,
    TypeIDProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace Sensor_QtProtobufNested

class Chat_QtProtobufData;
class Chat : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_PROTOBUF_MESSAGES_EXPORT)
    Q_PROPERTY(QString sender READ sender WRITE setSender SCRIPTABLE true)
    Q_PROPERTY(chat::Sensor *sensors_p READ sensors_p WRITE setSensors_p SCRIPTABLE false)
    Q_PROPERTY(bool hasSensors READ hasSensors)

public:
    using QtProtobufFieldEnum = Chat_QtProtobufNested::QtProtobufFieldEnum;
    QPB_PROTOBUF_MESSAGES_EXPORT Chat();
    QPB_PROTOBUF_MESSAGES_EXPORT ~Chat();
    QPB_PROTOBUF_MESSAGES_EXPORT Chat(const Chat &other);
    QPB_PROTOBUF_MESSAGES_EXPORT Chat &operator =(const Chat &other);
    QPB_PROTOBUF_MESSAGES_EXPORT Chat(Chat &&other) noexcept;
    Chat &operator =(Chat &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(Chat &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }
    QPB_PROTOBUF_MESSAGES_EXPORT Q_IMPLICIT operator QVariant() const;

    QPB_PROTOBUF_MESSAGES_EXPORT const QString &sender() const &;

    QPB_PROTOBUF_MESSAGES_EXPORT bool hasSensors() const;
    QPB_PROTOBUF_MESSAGES_EXPORT const Sensor &sensors() const &;
    QPB_PROTOBUF_MESSAGES_EXPORT void clearSensors();
    QPB_PROTOBUF_MESSAGES_EXPORT void setSender(const QString &sender);
    QPB_PROTOBUF_MESSAGES_EXPORT void setSender(QString &&sender);
    QPB_PROTOBUF_MESSAGES_EXPORT void setSensors(const Sensor &sensors);
    QPB_PROTOBUF_MESSAGES_EXPORT void setSensors(Sensor &&sensors);
    QPB_PROTOBUF_MESSAGES_EXPORT static void registerTypes();

private:
    friend QPB_PROTOBUF_MESSAGES_EXPORT bool comparesEqual(const Chat &lhs, const Chat &rhs) noexcept;
    friend bool operator==(const Chat &lhs, const Chat &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const Chat &lhs, const Chat &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QPB_PROTOBUF_MESSAGES_EXPORT Sensor *sensors_p();
    QPB_PROTOBUF_MESSAGES_EXPORT void setSensors_p(Sensor *sensors);
    QExplicitlySharedDataPointer<Chat_QtProtobufData> dptr;
};
namespace Chat_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_PROTOBUF_MESSAGES_EXPORT)

enum class QtProtobufFieldEnum {
    SenderProtoFieldNumber = 1,
    SensorsProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace Chat_QtProtobufNested

class Wrapper_QtProtobufData;
class Wrapper : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_PROTOBUF_MESSAGES_EXPORT)
    Q_PROPERTY(chat::Login *login_p READ login_p WRITE setLogin_p SCRIPTABLE false)
    Q_PROPERTY(bool hasLogin READ hasLogin)
    Q_PROPERTY(chat::Chat *chat_p READ chat_p WRITE setChat_p SCRIPTABLE false)
    Q_PROPERTY(bool hasChat READ hasChat)

public:
    using QtProtobufFieldEnum = Wrapper_QtProtobufNested::QtProtobufFieldEnum;
    using PayloadFields = Wrapper_QtProtobufNested::PayloadFields;
    QPB_PROTOBUF_MESSAGES_EXPORT Wrapper();
    QPB_PROTOBUF_MESSAGES_EXPORT ~Wrapper();
    QPB_PROTOBUF_MESSAGES_EXPORT Wrapper(const Wrapper &other);
    QPB_PROTOBUF_MESSAGES_EXPORT Wrapper &operator =(const Wrapper &other);
    QPB_PROTOBUF_MESSAGES_EXPORT Wrapper(Wrapper &&other) noexcept;
    Wrapper &operator =(Wrapper &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(Wrapper &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }
    QPB_PROTOBUF_MESSAGES_EXPORT Q_IMPLICIT operator QVariant() const;

    QPB_PROTOBUF_MESSAGES_EXPORT bool hasLogin() const;
    QPB_PROTOBUF_MESSAGES_EXPORT Login &login() const;

    QPB_PROTOBUF_MESSAGES_EXPORT bool hasChat() const;
    QPB_PROTOBUF_MESSAGES_EXPORT Chat &chat() const;
    QPB_PROTOBUF_MESSAGES_EXPORT PayloadFields payloadField() const;
    QPB_PROTOBUF_MESSAGES_EXPORT void setLogin(const Login &login);
    QPB_PROTOBUF_MESSAGES_EXPORT void setLogin(Login &&login);
    QPB_PROTOBUF_MESSAGES_EXPORT void setChat(const Chat &chat);
    QPB_PROTOBUF_MESSAGES_EXPORT void setChat(Chat &&chat);
    QPB_PROTOBUF_MESSAGES_EXPORT void clearPayload();
    QPB_PROTOBUF_MESSAGES_EXPORT static void registerTypes();

private:
    friend QPB_PROTOBUF_MESSAGES_EXPORT bool comparesEqual(const Wrapper &lhs, const Wrapper &rhs) noexcept;
    friend bool operator==(const Wrapper &lhs, const Wrapper &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const Wrapper &lhs, const Wrapper &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QPB_PROTOBUF_MESSAGES_EXPORT Login *login_p();
    QPB_PROTOBUF_MESSAGES_EXPORT Chat *chat_p();
    QPB_PROTOBUF_MESSAGES_EXPORT void setLogin_p(Login *login);
    QPB_PROTOBUF_MESSAGES_EXPORT void setChat_p(Chat *chat);
    QExplicitlySharedDataPointer<Wrapper_QtProtobufData> dptr;
};
namespace Wrapper_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_PROTOBUF_MESSAGES_EXPORT)

enum class QtProtobufFieldEnum {
    LoginProtoFieldNumber = 1,
    ChatProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

enum class PayloadFields : int32_t {
    UninitializedField = QtProtobuf::InvalidFieldNumber,
    Login = 1,
    Chat = 2,
};
Q_ENUM_NS(PayloadFields)

} // namespace Wrapper_QtProtobufNested
} // namespace chat

#endif // MESSAGE_QPB_H
